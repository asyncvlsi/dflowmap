/*
 * This file is part of the ACT library
 *
 * Copyright (c) 2022 Rui Li, Yihang Yang, Rajit Manohar
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA  02110-1301, USA.
 */
import globals;
import std::cells;
import std::channel;
import std::gates;

open std::gates;
open std::cells;
open std::channel;

import "dflow_stdlib.act";

namespace dflowstd {

template <pint V, W>
defproc constant_value(bool! d[W])
{
  (i:W: 
    [((V >> i) & 1) = 0 -> TIELOX1 tielow[i..i]; tielow[i].Y = d[i];
    [] else -> TIEHIX1 tiehigh[i..i]; tiehigh[i].Y = d[i];
    ]
  )
}

export defproc source_dflow <: source()
+{
  bd<W> out; 
}
{
  NOR2X1 reset_nor;
  reset_nor.A = Reset;
  reset_nor.B = out.a;
  reset_nor.Y = out.r;
  constant_value<V, W> consts;
  consts.d = out.d;
}

export defproc sink_dflow <: sink()
+{
  bd<W> in;
}
{ 
  // this signal buffer is needed because it is not allowed to directly connect `in.r' with `in.a'.
  BUFX2 sig_buf;
  sig_buf.A = in.r;
  sig_buf.Y = in.a;
}

export template <pint N>
defproc delay_line(bool? in; bool! out)
{
  INVX1 invs[2*N];
  invs[0].A = in;
  (i:2*N-1 : invs[i].Y = invs[i+1].A;)
  invs[2*N-1].Y = out;
}

/* 
 * This is a pulse generator. When the input signal ``in'' changes from 0 to 1, 
 * the output signal ``out'' will transit from 0 to 1, and then from 1 to 0. 
 * The duration of this pulse is controlled by parameter ``PW'' (pulse width), 
 * which determines the number of inverters (2*PW + 1).
 */
export template <pint PW>
defproc pulse(bool? in; bool! out)
{
  INVX1 invs[2*PW+1];
  invs[0].A = in;
  (i:2*PW: invs[i].Y = invs[i+1].A; )

  AND2X1 and;
  and.A = in;
  and.B = invs[2*PW].Y;

  out = and.Y;

  spec {
    timing in+: out+ <[1] and.B-
    // this delay margin is a placeholder, its actual value depends on the delay of LATCH
  }
}

/* 
 * This is a data capture unit, which consists of a local variable ``d'' and a 
 * control channel ``go''. When the signal ``go.r'' changes from 0 to 1, this unit 
 * starts sampling the input data ``din''. When the signal ``go.a'' changes from
 * 0 to 1, the data is successfully captured, and can be read from the output ``dout''.
 * 
 * Some parameters, ``W'' is the width of the data; ``CD'' is the capture delay;
 * ``PW'' is the time for latch to successfully store the data.
 */
export template <pint W, CD, PW>
defproc capture(a1of1 go; bool? din[W]; bool! dout[W])
{
  delay_line<CD> capture_delay;
  go.r = capture_delay.in;
  go.a = capture_delay.out;

  pulse<PW> pulse_generator;
  go.r = pulse_generator.in;

  sigbuf<W> fanout_tree;
  pulse_generator.out = fanout_tree.in;

  LATCH x[W];
  (i:W: din[i] = x[i].D; x[i].CLK = fanout_tree.out[i]; x[i].Q = dout[i];)

  spec {
    timing go.r+: dout < go.a+
  }
}

template <pint V, W>
defproc variable_value(bool? R, CLK, D[W]; bool! Q[W])
{
  sigbuf<W> clk_ftree;
  clk_ftree.in = CLK;
  (i:W: 
    [((V >> i) & 1) = 0 -> LATCHLO latch_low[i..i]; latch_low[i].R = R; latch_low[i].CLK = clk_ftree.out[i]; latch_low[i].D = D[i]; latch_low[i].Q = Q[i];
    [] else -> LATCHHI latch_hi[i..i]; latch_hi[i].S = R; latch_hi[i].CLK = clk_ftree.out[i]; latch_hi[i].D = D[i]; latch_hi[i].Q = Q[i];
    ]
  )
}

export template <pint V, W, CD, PW>
defproc capture_init(a1of1 go; bool? din[W]; bool! dout[W])
{
  delay_line<CD> capture_delay;
  go.r = capture_delay.in;
  go.a = capture_delay.out;

  pulse<PW> pulse_generator;
  go.r = pulse_generator.in;

  variable_value<V, W> x;
  x.R = Reset;
  x.CLK = pulse_generator.out;
  x.D = din;
  x.Q = dout;

  spec {
    timing go.r+: dout < go.a+
  }
}

export defproc CELE <: ctree<2, false> () {}
export defproc INVCELE <: ctree<2, true> () {}

/*
 * This is a one-place buffer.
 *
 */
export template<pint CD, PW>
defproc onebuf_dflow <: onebuf() 
+{
  bd<W> in, out;
}
{
  NOR2X1 reset_nor;
  reset_nor.A = Reset;
  reset_nor.B = out.a;

  CELE cele;
  cele.in[0] = in.r;
  cele.in[1] = reset_nor.Y;

  capture<W, CD, PW> data_capture;
  cele.out = data_capture.go.r;
  data_capture.din = in.d;
  data_capture.dout = out.d;
  data_capture.go.a = in.a;
  data_capture.go.a = out.r;

  spec {
    timing cele.out+: out.d < out.r+
  }
}

/*
 * This is a one-place buffer with an initial token.
 * This implementation uses a weird reshuffling, and will be replaced soon. 
 *
 */
export template<pint CD, PW>
defproc init_dflow <: init() 
+{
  bd<W> in, out;
}
{
  CELE cele;
  cele.in[0] = in.r;
  cele.in[1] = out.a;

  NOR2X1 reset_nor;
  reset_nor.A = Reset;
  reset_nor.B = cele.out;
  reset_nor.Y = out.r;

  capture_init<V, W, CD, PW> data_capture;
  cele.out = data_capture.go.r;
  data_capture.go.a = in.a;
  data_capture.din = in.d;
  data_capture.dout = out.d;

  spec {
    timing cele.out+: out.d < in.a+
  }
}

/*
 * The control unit of M-in-N-out function.
 * In this design, all outputs share the same delay line.
 * Timing constraints need to be specified when this circuit is used to construct the actual function.
 *
 */
export template<pint M, N, CD, PW>
defproc m_in_n_out_func_control(a1of1 in[M]; a1of1 dc[M]; a1of1 out[N]; a1of1 f)
{
  ctree<N, false> ack_ctree;
  (i:N: ack_ctree.in[i] = out[i].a;)

  OR2X1 reset_nor;
  reset_nor.A = Reset;
  reset_nor.B = ack_ctree.out;

  CELE celes[M];
  (i:M: in[i].r = celes[i].in[0]; reset_nor.Y = celes[i].in[1]; dc[i].r = celes[i].out;)

  ctree<M, false> data_ctree;
  (i:M: data_ctree.in[i] = dc[i].a;)
  data_ctree.out = f.r;

  sigbuf<N> out_ftree;
  f.a = out_ftree.in;
  (i:N: out_ftree.out[i] = out[i].r;)
}

/*
 * This is not usable now.
 *
 */
export template<pint CD, PW>
defproc copy_leaf_dflow <: copy_leaf() 
+{
  bd<W> in, out[N];
}
{
  ctree<N, false> ack_ctree;
  (i:N: ack_ctree.in[i] = out[i].a;)

  NOR2X1 reset_nor;
  reset_nor.A = Reset;
  reset_nor.B = ack_ctree.out;

  CELE cele;
  cele.in[0] = in.r;
  cele.in[1] = reset_nor.Y;

  capture<W, CD, PW> data_capture;
  cele.out = data_capture.go.r;
  data_capture.din = in.d;
  data_capture.dout = out.d;
  data_capture.go.a = in.a;

  sigbuf<N> r_ftree;
  in.a = r_ftree.in;
  (i:N: r_ftree.out[i] = out[i].r;)

  //sigbuf<N> d_ftrees[W];
  // a buffer tree to drive multiple output for datapath

  spec {
    timing cele.out+: out.d < in.a+
  }
}

}
