/*
 * This file is part of the ACT library
 *
 * Copyright (c) 2021 Rui Li
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA  02110-1301, USA.
 */

namespace dflow_std {

export namespace dflow_stdlib {

export
template<pint V, W>
defproc source(chan!(int<W>)out) {
  chp {
    *[log("send ", V); out!V]
  }
}

export
template<pint W>
defproc sink(chan?(int<W>) in) {
  int<W> t;  chp {
  *[in?t]
  }
}

export
template<pint W>
defproc onebuf(chan?(int<W>)in; chan!(int<W>) out) {
  int<W> x;
  chp {
    *[in?x; out!x]
  }
}

export
template<pint V, W>
defproc init(chan?(int<W>)in; chan!(int<W>) out) {
  int<W> x;
  chp {
    x := V;
    *[out!x; log("send ", x); in?x]
  }
}

export
template<pint W, N>
defproc copy_leaf(chan?(int<W>) in; chan!(int<W>) out[N]) {
  int<W> x;
  chp {
  *[ in?x; log("receive ", x); (,i:N: out[i]!x; log("send ", i, ",", x) )]
  }
}

export
template<pint W, N>
defproc copy(chan?(int<W>) in; chan!(int<W>) out[N]) {
  [ N <= 8 -> copy_leaf<W,N> l(in,out);
   [] else ->
      pint M = N/8;
      pint F = N - M*8;
      copy_leaf<W,8> t[M];
      (i:M: t[i].out=out[8*i..8*i+7];)
      [ F > 0 -> copy_leaf<W,F> u;
                 copy<W,M+1> m(in);
                 (i:M: m.out[i] = t[i].in;)
                 m.out[M] = u.in;
                 u.out=out[M*8..N-1];
      [] else -> copy<W,M> n(in);
                 (i:M: n.out[i] = t[i].in;)
      ]
  ]
}

export
template<pint N; pint W1, W2>
defproc unpipe_mixer(chan?(int<W1>) in[N]; chan!(int<W1>) out;
		     chan!(int<W2>) cout)
{
  chp {
    *[ [ ([]i:N: #in[i] -> out!in[i],cout!i; in[i]?) ] ]
  }
}

export
template<pint N; pint W1, W2>
defproc pipe_mixer(chan?(int<W1>) in[N]; chan!(int<W1>) out;
		   chan!(int<W2>) cout)
{
  int<W2> x;
  chp {
    *[ [ ([] i:N: #in[i] -> in[i]?x; out!x,cout!i ) ];
       log("send ", x)
    ]
  }
}

export
template<pint N; pint W1, W2>
defproc unpipe_arbiter(chan?(int<W1>) in[N]; chan!(int<W1>) out;
		       chan!(int<W2>) cout)
{
  chp {
    *[ [| ([]i:N: #in[i] -> out!in[i],cout!i; in[i]?) |] ]
  }
}

export
template<pint N; pint W1, W2>
defproc pipe_arbiter(chan?(int<W1>) in[N]; chan!(int<W1>) out;
		       chan!(int<W2>) cout)
{
  int<W2> x;
  chp {
    *[ [| ([]i: N: #in[i] -> in[i]?x; out!x,cout!i ) |];
       log("send ", x)
    ]
  }
}

export
template<pint N; pint W1, W2>
defproc unpipe_merge(chan?(int<W1>)ctrl; chan?(int<W2>) in[N];
		     chan!(int<W2>) out)
{
  chp {
    *[[ ([]i:N: ctrl=i & #in[i] -> out!in[i]; in[i]?,ctrl? ) ]]
  }
}

export
template<pint N; pint W1, W2>
defproc pipe_merge(chan?(int<W1>)ctrl; chan?(int<W2>) in[N];
		   chan!(int<W2>) out)
{
  int<W1> c;
  int<W2> x;
  chp {
    *[ctrl?c; log("receive ", c);
      [([]i:N: c=i -> in[i]?x) ];
      log("receive x: ", x);
      out!x; log("send ", x)
    ]
  }
}

export
template<pint N; pint W1,W2>
defproc unpipe_split(chan?(int<W1>)ctrl; chan?(int<W2>)in;
		     chan!(int<W2>) out[N])
{
  chp {
    *[[ ([]i:N: ctrl=i & #in -> out[i]!in; in?,ctrl?) ]]
  }
}

export
template<pint N; pint W1,W2>
defproc pipe_split(chan?(int<W1>)ctrl; chan?(int<W2>)in;
		   chan!(int<W2>) out[N])
{		   
  int<W1> c;
  int<W2> x;
  chp {
    *[in?x, ctrl?c; log("receive ", c, ", ", x);
      [ ([]i:N:c=i -> out[i]!x) ];
      log("send ", x)
    ]
  }
}

}

}
